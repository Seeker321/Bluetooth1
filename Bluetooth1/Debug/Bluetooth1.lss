
Bluetooth1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078d  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000651  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c3  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 75 00 	call	0xea	; 0xea <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:
	/* Wait for data to be received */
	if ( !(UCSRA & (1<<RXC)) )
	;
	/* Get and return received data from buffer */
	return UDR;
}
  6c:	10 bc       	out	0x20, r1	; 32
  6e:	83 e3       	ldi	r24, 0x33	; 51
  70:	89 b9       	out	0x09, r24	; 9
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	88 61       	ori	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	86 68       	ori	r24, 0x86	; 134
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <USART_Transmit_Char>:
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <USART_Transmit_Char>
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <USART_Transmit_String>:
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	ec 01       	movw	r28, r24
  8e:	88 81       	ld	r24, Y
  90:	88 23       	and	r24, r24
  92:	31 f0       	breq	.+12     	; 0xa0 <USART_Transmit_String+0x18>
  94:	21 96       	adiw	r28, 0x01	; 1
  96:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit_Char>
  9a:	89 91       	ld	r24, Y+
  9c:	81 11       	cpse	r24, r1
  9e:	fb cf       	rjmp	.-10     	; 0x96 <USART_Transmit_String+0xe>
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <USART_Receive_String>:
}

unsigned char USART_Receive_Char( void )
{
	/* Wait for data to be received */
	if ( !(UCSRA & (1<<RXC)) )
  a6:	2b b1       	in	r18, 0x0b	; 11
	;
	/* Get and return received data from buffer */
	return UDR;
  a8:	4c b1       	in	r20, 0x0c	; 12
	NextChar = USART_Receive_Char();         // Warte auf und empfange das nächste Zeichen

	// Sammle solange Zeichen, bis:
	// * entweder das String Ende Zeichen kam
	// * oder das aufnehmende Array voll ist
	while( NextChar != '\n' && StringLen < MaxLen - 1 ) {
  aa:	4a 30       	cpi	r20, 0x0A	; 10
  ac:	b9 f0       	breq	.+46     	; 0xdc <USART_Receive_String+0x36>
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	61 50       	subi	r22, 0x01	; 1
  b2:	71 09       	sbc	r23, r1
  b4:	16 16       	cp	r1, r22
  b6:	17 06       	cpc	r1, r23
  b8:	a4 f4       	brge	.+40     	; 0xe2 <USART_Receive_String+0x3c>
  ba:	e8 2f       	mov	r30, r24
  bc:	f9 2f       	mov	r31, r25
		*Buffer++ = NextChar;
  be:	31 96       	adiw	r30, 0x01	; 1
  c0:	df 01       	movw	r26, r30
  c2:	11 97       	sbiw	r26, 0x01	; 1
  c4:	4c 93       	st	X, r20
  c6:	2e 2f       	mov	r18, r30
  c8:	28 1b       	sub	r18, r24
}

unsigned char USART_Receive_Char( void )
{
	/* Wait for data to be received */
	if ( !(UCSRA & (1<<RXC)) )
  ca:	9b b1       	in	r25, 0x0b	; 11
	;
	/* Get and return received data from buffer */
	return UDR;
  cc:	4c b1       	in	r20, 0x0c	; 12
	NextChar = USART_Receive_Char();         // Warte auf und empfange das nächste Zeichen

	// Sammle solange Zeichen, bis:
	// * entweder das String Ende Zeichen kam
	// * oder das aufnehmende Array voll ist
	while( NextChar != '\n' && StringLen < MaxLen - 1 ) {
  ce:	4a 30       	cpi	r20, 0x0A	; 10
  d0:	51 f0       	breq	.+20     	; 0xe6 <USART_Receive_String+0x40>
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	26 17       	cp	r18, r22
  d6:	37 07       	cpc	r19, r23
  d8:	94 f3       	brlt	.-28     	; 0xbe <USART_Receive_String+0x18>
  da:	05 c0       	rjmp	.+10     	; 0xe6 <USART_Receive_String+0x40>
  dc:	e8 2f       	mov	r30, r24
  de:	f9 2f       	mov	r31, r25
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <USART_Receive_String+0x40>
  e2:	e8 2f       	mov	r30, r24
  e4:	f9 2f       	mov	r31, r25
		NextChar = USART_Receive_Char();
	}

	// Noch ein '\0' anhängen um einen Standard
	// C-String daraus zu machen
	*Buffer = '\0';
  e6:	10 82       	st	Z, r1
  e8:	08 95       	ret

000000ea <main>:




int main(void)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	ac 97       	sbiw	r28, 0x2c	; 44
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
	char Line[40];
	USART_Init();
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	
	
	unsigned char Test = 'c';
	char Test_Array[] = {'T','E','S','T'};
 102:	84 e5       	ldi	r24, 0x54	; 84
 104:	89 a7       	std	Y+41, r24	; 0x29
 106:	95 e4       	ldi	r25, 0x45	; 69
 108:	9a a7       	std	Y+42, r25	; 0x2a
 10a:	93 e5       	ldi	r25, 0x53	; 83
 10c:	9b a7       	std	Y+43, r25	; 0x2b
 10e:	8c a7       	std	Y+44, r24	; 0x2c
	
    /* Replace with your application code */
    while (1) 
    {
		
		USART_Transmit_Char(Test);
 110:	83 e6       	ldi	r24, 0x63	; 99
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 40 00 	call	0x80	; 0x80 <USART_Transmit_Char>
		USART_Transmit_String(Test_Array);
 118:	ce 01       	movw	r24, r28
 11a:	89 96       	adiw	r24, 0x29	; 41
 11c:	0e 94 44 00 	call	0x88	; 0x88 <USART_Transmit_String>
		
		
		USART_Receive_String( Line, sizeof( Line ) );
 120:	68 e2       	ldi	r22, 0x28	; 40
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Receive_String>
		
		
    }
 12c:	f1 cf       	rjmp	.-30     	; 0x110 <main+0x26>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
